name: Build TuneUp Releases

# Questo workflow si attiva quando crei una nuova release su GitHub
on:
  release:
    types: [created]

jobs:
  build:
    # Esegui questo job su tre diverse macchine virtuali
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # Usiamo una versione stabile di Python

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: (macOS only) Create .icns icon
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p icon.iconset
        sips -z 1024 1024 assets/icon.png -o icon.iconset/icon_1024x1024.png
        iconutil -c icns icon.iconset -o assets/icon.icns
      shell: bash

    - name: (Windows only) Create .ico icon
      if: matrix.os == 'windows-latest'
      # Usiamo una action della community per convertire png in ico
      uses: Niloofaar/png-to-ico-action@v1.0.0
      with:
          source_path: 'assets/icon.png'
          destination_path: 'assets/icon.ico'

    - name: Build with PyInstaller
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          python -m pyinstaller --name="TuneUp" --onefile --windowed --icon="assets/icon.ico" gui_gestore_musicale.py
        elif [ "$RUNNER_OS" == "macOS" ]; then
          python -m pyinstaller --name="TuneUp" --onefile --windowed --icon="assets/icon.icns" gui_gestore_musicale.py
        else
          python -m pyinstaller --name="TuneUp" --onefile gui_gestore_musicale.py
        fi
      shell: bash

    - name: Rename artifacts
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          mv dist/TuneUp.exe dist/TuneUp-Windows.exe
        elif [ "$RUNNER_OS" == "macOS" ]; then
          # Su macOS, PyInstaller crea una cartella .app
          zip -r dist/TuneUp-macOS.zip dist/TuneUp.app
        else
          mv dist/TuneUp dist/TuneUp-Linux
        fi
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: |
          dist/TuneUp-*
        asset_name: |
          ${{ matrix.os == 'windows-latest' && 'TuneUp-Windows.exe' || '' }}${{ matrix.os == 'macos-latest' && 'TuneUp-macOS.zip' || '' }}${{ matrix.os == 'linux-latest' && 'TuneUp-Linux' || '' }}
        asset_content_type: application/octet-stream
